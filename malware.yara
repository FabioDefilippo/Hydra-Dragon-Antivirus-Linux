rule Ransomware_Detection {
    meta:
        author = "Emirhan Ucan"
        description = "Detects potential ransomware activity"
    
    strings:
        $utf8_check = "E08080..E0BFBF" // Unreadable characters in UTF-8
        $not_dot_folder = ".[a-zA-Z0-9_]+" wide // Folders that don't start with a dot
        $deleted_file = /MFT Entry [0-9]+ deleted/ // Deleted file entry in MFT
    
    condition:
        $utf8_check at 0 and $not_dot_folder and $deleted_file and
        (entrypoint == 0x00400000) // Check if the file was created by itself (change entrypoint to your use case)
}

rule Malware_rm_rf {
    strings:
        $pattern1 = "rm -rf /"

    condition:
        $pattern1
}

rule Malware_chmod_ugo-rwx {
    strings:
        $pattern1 = "chmod -R ugo-rwx /"

    condition:
        $pattern1
}

rule Malware_chattr_R_i {
    strings:
        $pattern1 = "chattr -R +i /"

    condition:
        $pattern1
}

rule Malware_chown {
    strings:
        $pattern1 = "chown /"

    condition:
        $pattern1
}

rule Malware_mkfs_ext4 {
    strings:
        $pattern1 = "mkfs.ext4"

    condition:
        $pattern1
}

rule Malware_chmod_777 {
    strings:
        $pattern1 = "chmod 777 /"

    condition:
        $pattern1
}

rule Malware_fdisk {
    strings:
        $pattern1 = "fdisk /dev/sd[a-z]"

    condition:
        $pattern1
}

rule Malware_dd_disk_overwriter {
    strings:
        $pattern1 = "dd if=/dev/zero of=/dev/sd[a-z]"

    condition:
        $pattern1
}

rule Malware_ufw_disable {
    strings:
        $pattern1 = "ufw disable"

    condition:
        $pattern1
}

rule Malicious_shutdown {
    strings:
        $pattern1 = "shutdown"

    condition:
        $pattern1
}

rule Malicious_reverse_shell {
    strings:
        $pattern1 = "nc -l -p 4444 -e /bin/bash"
        $pattern2 = "ncat -l -p 4444 -e /bin/bash"

    condition:
        any of ($pattern1, $pattern2)
}

rule Malicious_init_0 {
    strings:
        $pattern1 = "init 0"

    condition:
        $pattern1
}

rule Malicious_init_6 {
    strings:
        $pattern1 = "init 6"

    condition:
        $pattern1
}

rule Malicious_fork_bomb {
    strings:
        $pattern1 = ':(){:|:&};'

    condition:
        $pattern1
}

rule Malicious_wget_with_O {
    strings:
        $pattern1 = "wget https://"
        $pattern2 = "\\s+-O \\w+\\.\\w+"

    condition:
        all of ($pattern1, $pattern2)
}

rule Malicious_fifo_pipe_netcat {
    strings:
        $pattern1 = "mkfifo /tmp/backpipe; /bin/sh 0</tmp/backpipe | nc \\d+\\.\\d+\\.\\d+\\.\\d+ \\d+ 1>/tmp/backpipe"

    condition:
        $pattern1
}

rule Malicious_fifo_pipe_shell_netcat {
    strings:
        $pattern1 = "mkfifo /tmp/fifo; cat /tmp/fifo | /bin/sh -i 2>&1 | nc \\d+\\.\\d+\\.\\d+\\.\\d+ \\d+ > /tmp/fifo"

    condition:
        $pattern1
}

rule Malicious_openssl_enc {
    strings:
        $pattern1 = "openssl enc -aes-256-cbc"

    condition:
        $pattern1
}

rule Malicious_cat_dev_sda {
    strings:
        $pattern1 = "cat > /dev/sda"

    condition:
        $pattern1
}

rule Malicious_disable_bash {
    strings:
        $pattern1 = "mv /bin/bash /bin/bash.bak"

    condition:
        $pattern1
}

rule Malicious_find_log_files {
    strings:
        $pattern1 = "find / -name \"*.log\""

    condition:
        $pattern1
}

rule Malicious_remove_log_files {
    strings:
        $pattern1 = "-exec rm -f {} ;"

    condition:
        $pattern1
}

rule Malicious_remove_libc_so6 {
    strings:
        $pattern1 = "rm -f /lib/libc.so.6"

    condition:
        $pattern1
}

rule Malicious_fifo {
    strings:
        $pattern1 = "mkfifo /\\w+/\\w+; \\S+ /\\w+/\\w+ | \\S+ \\d+\\.\\d+\\.\\d+\\.\\d+ \\d+"

    condition:
        $pattern1
}

rule Malicious_shell {
    strings:
        $pattern1 = "\\S+ /bin/sh -i"

    condition:
        $pattern1
}
